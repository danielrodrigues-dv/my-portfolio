<!DOCTYPE html>
<html lang="pt-br">

<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>cv-daniel</title>
  <!--css-->
  <link rel="stylesheet" href="./src/assets/css/global.css" />
  <link rel="stylesheet" href="./src/assets/css/bootstrap/css/boostrap.min.css" />
  <!--css-->
</head>

<body style="background-color: #121214;">
  <header class="d-flex justify-content-center py-3" style="background-color: #202024;">
    <ul class="nav nav-pills">
      <li class="nav-item"><a href="#" class="nav-link active" aria-current="page">Home</a></li>
      <li class="nav-item"><a href="#" class="nav-link">Features</a></li>
      <li class="nav-item"><a href="#" class="nav-link">Pricing</a></li>
      <li class="nav-item"><a href="#" class="nav-link">FAQs</a></li>
      <li class="nav-item"><a href="#" class="nav-link">About</a></li>
    </ul>
  </header>

  <main style="margin-top: 20px;">
    <div class="container">
      <div class="row">
        <div class="col" id="stapone" style="display: none;">
          <div class="d-flex justify-content-center" style="height: 100vh; text-align: center;">
            <div class="d-flex align-items-center">
              <div class="d-flex flex-column mb-3">
                <div class="p-2"><img src="./src/assets/img/imgs.png" width="250vh" height="100%" alt="img-daniel"
                    style="border: 2px solid red; border-radius: 150px;"></div>
                <div class="p-2">
                  <h4 style="color: white; padding-top: 20px;">Software Developer</h4>
                </div>
                <div class="p-2">
                  <h5 style="color: rgba(255, 255, 255, 0.541);">Daniel Rodrigues</h5>
                </div>
                <button type="button" class="btn btn-outline-secondary"
                  style="margin-top: 30px; font-family: Verdana, Geneva, Tahoma, sans-serif; border: 2px solid rgb(255, 255, 255);"
                  onclick="stapone()">Saiba mais</button>
              </div>
            </div>
          </div>
        </div>


<!--Inicio perfil-->

        <div class="col" style="display: block; text-align: center;" id="stapthree">
          <div class="d-flex justify-content-center">
            <div class="d-flex align-items-center">
              <div class="d-flex flex-column mb-3">
                <div class="p-2">
                  <div class="card" style="width: 22rem; background-color: #202024;">
                    <img src="./src/assets/img/imgs.png" class="card-img-top mt-4" alt="img-perfil" style="border: 2px solid red; border-radius: 150px; width: 155px; margin: auto;">
                    <div class="card-body">
                      <p class="card-text"><h1 style="font-size: 25px; color: white;">Software Developer</h1></p>
                      <p class="card-text">Daniel Rodrigues</p>
                    </div>
                  </div>
                </div>
                <div class="p-2">
                  <h4 style="color: white; padding-top: 20px;">Software Developer</h4>
                </div>
                <div class="p-2">
                  <h5 style="color: rgba(255, 255, 255, 0.541);">Daniel Rodrigues</h5>
                </div>
                <button type="button" class="btn btn-outline-secondary"
                  style="margin-top: 30px; font-family: Verdana, Geneva, Tahoma, sans-serif; border: 2px solid rgb(255, 255, 255);"
                  onclick="stapone()">Saiba mais</button>
              </div>
            </div>
          </div>
        </div>


        <div class="col" style="display: block; text-align: center;" id="stapthree">
          <div class="d-flex justify-content-center">
            <div class="d-flex align-items-center">
              <div class="d-flex flex-column mb-3">
                <div class="p-2">
                  <div class="card" style="width: 40rem; background-color: #202024;">
                    <div class="card-body">
                      <p class="card-text"><h1 style="font-size: 25px; color: white;">Software Developer</h1></p>
                      <p class="card-text">Daniel Rodrigues</p>
                    </div>
                  </div>
                </div>
                <div class="p-2">
                  <h4 style="color: white; padding-top: 20px;">Software Developer</h4>
                </div>
                <div class="p-2">
                  <h5 style="color: rgba(255, 255, 255, 0.541);">Daniel Rodrigues</h5>
                </div>
                <button type="button" class="btn btn-outline-secondary"
                  style="margin-top: 30px; font-family: Verdana, Geneva, Tahoma, sans-serif; border: 2px solid rgb(255, 255, 255);"
                  onclick="stapone()">Saiba mais</button>
              </div>
            </div>
          </div>
        </div>

<!--Fim perfil-->


      </div>
    </div>
    <canvas id="canvas"></canvas>
  </main>

  <!--Fundo animado-->
  <script>
    let resizeReset = function () {
      w = canvasBody.width = window.innerWidth;
      h = canvasBody.height = window.innerHeight;
    }

    const opts = {
      particleColor: "rgb(200,200,200)",
      lineColor: "rgb(200,200,200)",
      particleAmount: 4,
      defaultSpeed: 1,
      variantSpeed: 1,
      defaultRadius: 2,
      variantRadius: 2,
      linkRadius: 200,
    };

    window.addEventListener("resize", function () {
      deBouncer();
    });

    let deBouncer = function () {
      clearTimeout(tid);
      tid = setTimeout(function () {
        resizeReset();
      }, delay);
    };

    let checkDistance = function (x1, y1, x2, y2) {
      return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
    };

    let linkPoints = function (point1, hubs) {
      for (let i = 0; i < hubs.length; i++) {
        let distance = checkDistance(point1.x, point1.y, hubs[i].x, hubs[i].y);
        let opacity = 1 - distance / opts.linkRadius;
        if (opacity > 0) {
          drawArea.lineWidth = 0.5;
          drawArea.strokeStyle = `rgba(${rgb[0]}, ${rgb[1]}, ${rgb[2]}, ${opacity})`;
          drawArea.beginPath();
          drawArea.moveTo(point1.x, point1.y);
          drawArea.lineTo(hubs[i].x, hubs[i].y);
          drawArea.closePath();
          drawArea.stroke();
        }
      }
    }

    Particle = function (xPos, yPos) {
      this.x = Math.random() * w;
      this.y = Math.random() * h;
      this.speed = opts.defaultSpeed + Math.random() * opts.variantSpeed;
      this.directionAngle = Math.floor(Math.random() * 360);
      this.color = opts.particleColor;
      this.radius = opts.defaultRadius + Math.random() * opts.variantRadius;
      this.vector = {
        x: Math.cos(this.directionAngle) * this.speed,
        y: Math.sin(this.directionAngle) * this.speed
      };
      this.update = function () {
        this.border();
        this.x += this.vector.x;
        this.y += this.vector.y;
      };
      this.border = function () {
        if (this.x >= w || this.x <= 0) {
          this.vector.x *= -1;
        }
        if (this.y >= h || this.y <= 0) {
          this.vector.y *= -1;
        }
        if (this.x > w) this.x = w;
        if (this.y > h) this.y = h;
        if (this.x < 0) this.x = 0;
        if (this.y < 0) this.y = 0;
      };
      this.draw = function () {
        drawArea.beginPath();
        drawArea.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
        drawArea.closePath();
        drawArea.fillStyle = this.color;
        drawArea.fill();
      };
    };

    function setup() {
      particles = [];
      resizeReset();
      for (let i = 0; i < opts.particleAmount; i++) {
        particles.push(new Particle());
      }
      window.requestAnimationFrame(loop);
    }

    function loop() {
      window.requestAnimationFrame(loop);
      drawArea.clearRect(0, 0, w, h);
      for (let i = 0; i < particles.length; i++) {
        particles[i].update();
        particles[i].draw();
      }
      for (let i = 0; i < particles.length; i++) {
        linkPoints(particles[i], particles);
      }
    }

    const canvasBody = document.getElementById("canvas"),
      drawArea = canvasBody.getContext("2d");
    let delay = 200, tid,
      rgb = opts.lineColor.match(/\d+/g);
    resizeReset();
    setup();
  </script>
  <!--Fundo animado-->

  <!--Bootstrap 5.2-->
  <script src="./src/assets/js/global.js"></script>
  <script src="./src/assets/js/boostrap/boostrap.bundle.min.js"></script>
  <script src="./src/assets/js/boostrap/popper.min.js"></script>
  <!--Bootstrap 5.2-->

</body>

</html>